<?xml version="1.0" encoding="utf-8"?>

<project name="xslutil" basedir="." default="build">

 <!-- These properties are used by merge processes -->
 <property name="product" value="xslutil.xsl"/>
 <property name="version" value="0.1"/>
 <property name="copyright" value="Copyright (C) 2019-2022 xslet project"/>
 <property name="license" value="MIT License"/>

 <property file="build.properties"/>


 <target name="setup"
   description="Make directories and download modules used for build.">
  <antcall target="setup:dirs"/>
  <antcall target="setup:scss"/>
  <antcall target="setup:js"/>
  <antcall target="setup:deps"/>
 </target>

 <target name="setup:dirs">
  <mkdir dir="${dir.src.xsl}/lib"/>
  <mkdir dir="${dir.src.xsl}/ext"/>
  <mkdir dir="${dir.src.scss}"/>
  <mkdir dir="${dir.src.js}"/>
  <mkdir dir="${dir.dist}"/>
  <mkdir dir="${dir.test}/unit"/>
  <mkdir dir="${dir.docs}/test"/>
  <mkdir dir="${dir.docs}/api"/>
  <mkdir dir="${dir.work.dl}"/>
  <mkdir dir="${dir.work.lib}"/>
  <mkdir dir="${dir.work.bin}"/>
  <mkdir dir="${dir.deploy}"/>
 </target>

 <target name="setup:scss">
  <touch file="${dir.src.scss}/xslutil.scss"/>
 </target>

 <target name="setup:js">
  <copy todir="${dir.src.js}">
   <fileset dir="${dir.res.js}"/>
  </copy>
  <exec executable="${npm.cmd}">
   <arg line="${npm.arg}"/>
   <arg line="install"/>
   <arg line="--prefix ${dir.src.js}"/>
  </exec>
 </target>

 <target name="setup:deps">
  <antcall target="setup:xsldoc"/>
  <antcall target="setup:saxon"/>
  <antcall target="setup:tomcat"/>
 </target>

 <target name="setup:xsldoc">
  <property name="zip" location="${dir.work.dl}/${pkg.xsldoc}.zip"/>
  <property name="unzip" location="${dir.xsldoc}/.."/>
  <get src="${url.xsldoc.download}" dest="${zip}"/>
  <unzip src="${zip}" dest="${unzip}"/>
 </target>

 <target name="setup:saxon">
  <property name="zip" location="${dir.work.dl}/${pkg.saxon}.zip"/>
  <property name="unzip" location="${dir.saxon}"/>
  <get src="${url.saxon.download}" dest="${zip}"/>
  <unzip src="${zip}" dest="${unzip}"/>
 </target>

 <target name="setup:tomcat">
  <property name="zip" location="${dir.work.dl}/${pkg.tomcat}.zip"/>
  <property name="unzip" location="${dir.work.bin}"/>
  <get src="${url.tomcat.download}" dest="${zip}"/>
  <unzip src="${zip}" dest="${unzip}"/>
  <chmod perm="ugo+rx" dir="${dir.tomcat}/bin" includes="**/*.sh"/>
 </target>


 <target name="build"
   description="Execute `clean`, `merge` and `deploy` tasks.">
  <antcall target="clean"/>
  <antcall target="merge"/>
  <!--
  <antcall target="build:scss"/>
  <antcall target="build:js"/>
  -->
  <antcall target="deploy"/>
 </target>


 <target name="clean"
   description="Clean files in `dist` directory.">
  <delete>
   <fileset dir="${dir.dist}"      includes="**/*"/>
   <fileset dir="${dir.deploy}"    includes="**/*"/>
   <fileset dir="${dir.docs}/test" includes="**/*"/>
   <fileset dir="${dir.docs}/api"  includes="**/*"/>
  </delete>
  <exec executable="find" os="Mac OS X">
   <arg line=". -name .DS_Store -delete"/>
  </exec>
 </target>


 <target name="merge"
   description="Merge XSL files into a distributable file.">
  <delete>
   <fileset dir="${dir.src.xsl}/ext" includes="**/*"/>
  </delete>
  <antcall target="merge:xsl-for-doc"/>
  <antcall target="merge:xsl-for-dist"/>
  <antcall target="merge:xsl-for-test"/>
 </target>

 <target name="merge:xsl-for-doc">
  <path id="extjars">
   <fileset dir="${dir.work.lib}">
    <include name="**/*.jar" />
   </fileset>
  </path>
  <java classname="net.sf.saxon.Transform">
   <arg line="-o:${dir.docs}" />
   <arg line="-s:${dir.src.xsl}" />
   <arg line="-xsl:${dir.res.xsl}/merge-for-doc.xsl" />
   <arg line="-strip:all" />
   <classpath refid="extjars" />
  </java>
 </target>

 <target name="merge:xsl-for-dist">
  <path id="extjars">
   <fileset dir="${dir.work.lib}">
    <include name="**/*.jar" />
   </fileset>
  </path>
  <java classname="net.sf.saxon.Transform">
   <arg line="-o:${dir.dist}" />
   <arg line="-s:${dir.src.xsl}" />
   <arg line="-xsl:${dir.res.xsl}/merge-for-dist.xsl" />
   <arg line="-strip:all" />
   <classpath refid="extjars" />
  </java>
 </target>

 <target name="merge:xsl-for-test">
  <path id="extjars">
   <fileset dir="${dir.work.lib}">
    <include name="**/*.jar" />
   </fileset>
  </path>
  <java classname="net.sf.saxon.Transform">
   <arg line="-o:${dir.test}/unit" />
   <arg line="-s:${dir.src.xsl}" />
   <arg line="-xsl:${dir.res.xsl}/merge-for-test.xsl" />
   <arg line="-strip:all" />
   <classpath refid="extjars" />
  </java>
 </target>

 <target name="build:scss">
  <property name="prefix" value="${dir.src.js}" />
  <exec executable="${npm.cmd}">
   <arg line="${npm.arg}" />
   <arg line="run sass:build" />
   <arg line="--prefix ${prefix}" />
  </exec>
 </target>

 <target name="build:js">
  <property name="prefix" value="${dir.src.js}" />
  <exec executable="${npm.cmd}">
   <arg line="${npm.arg}" />
   <arg line="run js:build" />
   <arg line="--prefix ${prefix}" />
  </exec>
 </target>


 <target name="deploy"
   description="Deploy distributable files and test files to Tomcat.">
  <copy todir="${dir.docs}/test">
   <fileset dir="${dir.test}"/>
  </copy>
  <copy todir="${dir.docs}/api/xsldoc">
   <fileset dir="${dir.xsldoc}/dist"/>
  </copy>
  <copy todir="${dir.docs}/test/unit">
   <fileset dir="${dir.res.doc}"/>
  </copy>
  <copy todir="${dir.deploy}">
   <fileset dir="${dir.docs}"/>
  </copy>
 </target>


 <target name="watch"
   description="Watch source files updated, then deploy.">
  <retry retrycount="1000000">
   <antcall target="watch:wait-and-build"/>
  </retry>
 </target>

 <target name="watch:wait-and-build">
  <waitfor>
   <not>
    <uptodate targetfile="${dir.dist}/${product}">
     <srcfiles dir="${dir.src}" includes="**/*"/>
     <srcfiles dir="${dir.test}" includes="**/*"/>
    </uptodate>
   </not>
  </waitfor>
  <antcall target="build"/>
  <touch file="${dir.dist}/${product}"/>
  <fail/>
 </target>


 <target name="start"
   description="Start tomcat.">
  <condition property="cmd" value="startup.bat" else="startup.sh">
   <os family="windows"/>
  </condition>
  <exec executable="${dir.tomcat}/bin/${cmd}"/>
 </target>


 <target name="stop"
   description="Stop tomcat.">
  <condition property="cmd" value="shutdown.bat" else="shutdown.sh">
   <os family="windows"/>
  </condition>
  <exec executable="${dir.tomcat}/bin/${cmd}"/>
 </target>


 <condition property="npm.cmd" value="cmd" else="npm">
  <os family="windows"/>
 </condition>

 <condition property="npm.arg" value="/c npm" else="">
  <os family="windows"/>
 </condition>

</project>
