<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:ut="https://github.com/xslet/2020/xslutil" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"><xsl:param name="ut:apos">'</xsl:param><xsl:param name="ut:quot">"</xsl:param><xsl:param name="ut:true" select="string(true())"/><xsl:param name="ut:unknown_namespace">&#x86;-&#x87;</xsl:param><xsl:template match="assert-not-empty[@name='ut:apos']"/><xsl:template match="assert-empty[@name='ut:apos']"/><xsl:template match="assert-equal[@name='ut:apos']"/><xsl:template match="assert-not-empty[@name='ut:quot']"/><xsl:template match="assert-empty[@name='ut:quot']"/><xsl:template match="assert-equal[@name='ut:quot']"/><xsl:template match="assert-not-empty[@name='ut:true']"/><xsl:template match="assert-empty[@name='ut:true']"/><xsl:template match="assert-equal[@name='ut:true']"/><xsl:template match="assert-not-empty[@name='ut:unknown_namespace']"/><xsl:template match="assert-empty[@name='ut:unknown_namespace']"/><xsl:template match="assert-equal[@name='ut:unknown_namespace']"/><xsl:template name="ut:count"><!--** A string to be checked. --><xsl:param name="string"/><!--** A target substring to be counted. --><xsl:param name="target"/><xsl:choose><xsl:when test="string-length($string) = 0">0</xsl:when><xsl:when test="string-length($target) = 0">0</xsl:when><xsl:when test="starts-with($string, $target)"><xsl:variable name="_count"><xsl:variable name="_next_bgn" select="string-length($target) + 1"/><xsl:call-template name="ut:count"><xsl:with-param name="string" select="substring($string, $_next_bgn)"/><xsl:with-param name="target" select="$target"/></xsl:call-template></xsl:variable><xsl:value-of select="$_count + 1"/></xsl:when><xsl:otherwise><xsl:call-template name="ut:count"><xsl:with-param name="string" select="substring($string, 2)"/><xsl:with-param name="target" select="$target"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ut:ends_with"><!--** A string to be tested. --><xsl:param name="string"/><!--** A suffix substring. --><xsl:param name="suffix"/><xsl:variable name="_len1" select="string-length($suffix)"/><xsl:choose><xsl:when test="$_len1 = 0"><xsl:value-of select="$ut:true"/></xsl:when><xsl:otherwise><xsl:variable name="_len0" select="string-length($string)"/><xsl:variable name="_len2" select="$_len0 - $_len1"/><xsl:variable name="_ends" select="substring($string, $_len2 + 1)"/><xsl:if test="$_ends = $suffix"><xsl:value-of select="$ut:true"/></xsl:if></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ut:get_dir_from_url"><!--** An URL string. --><xsl:param name="url"/><xsl:choose><xsl:when test="not(contains($url, '/'))">.</xsl:when><xsl:otherwise><xsl:call-template name="ut:_get_dir_from_url_r"><xsl:with-param name="url" select="$url"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ut:_get_dir_from_url_r"><xsl:param name="url"/><xsl:value-of select="substring-before($url, '/')"/><xsl:variable name="suburl" select="substring-after($url, '/')"/><xsl:if test="string-length($suburl) &gt; 0"><xsl:variable name="subdir"><xsl:call-template name="ut:_get_dir_from_url_r"><xsl:with-param name="url" select="$suburl"/></xsl:call-template></xsl:variable><xsl:if test="string-length($subdir) &gt; 0"><xsl:value-of select="concat('/', $subdir)"/></xsl:if></xsl:if></xsl:template><xsl:template name="ut:get_namespace_uri"><!--** A prefix of a namespace. --><xsl:param name="prefix"/><xsl:variable name="_ns" select="namespace::*[name() = $prefix]"/><xsl:choose><xsl:when test="string-length($_ns) &gt; 0"><xsl:value-of select="$_ns"/></xsl:when><xsl:otherwise><!-- Because Firefox does not support namespace axis --><xsl:variable name="_ns2" select="namespace-uri(//*[name() = concat($prefix,':',local-name())])"/><xsl:choose><xsl:when test="string-length($_ns2) &gt; 0"><xsl:value-of select="$_ns2"/></xsl:when><xsl:when test="string-length($prefix) &gt; 0"><xsl:value-of select="$ut:unknown_namespace"/></xsl:when></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ut:get_xsl_url"><!--** A processing instruction. (Optional) --><xsl:param name="pi" select="/processing-instruction('xml-stylesheet')"/><xsl:variable name="QUOT">"</xsl:variable><xsl:variable name="APOS">'</xsl:variable><xsl:variable name="s1" select="substring-after($pi, 'href')"/><xsl:if test="normalize-space(substring-before($s1, '=')) = ''"><xsl:variable name="s2" select="substring-after($s1, '=')"/><xsl:choose><xsl:when test="substring($s2, 1, 1) = $QUOT"><xsl:value-of select="translate(substring-before(substring-after($s2, $QUOT), $QUOT), '\', '/')"/></xsl:when><xsl:when test="substring($s2, 1, 1) = $APOS"><xsl:value-of select="translate(substring-before(substring-after($s2, $APOS), $APOS), '\', '/')"/></xsl:when><xsl:otherwise><xsl:variable name="s3" select="normalize-space($s2)"/><xsl:choose><xsl:when test="substring($s3, 1, 1) = $QUOT"><xsl:value-of select="translate(substring-before(substring-after($s2, $QUOT), $QUOT), '\', '/')"/></xsl:when><xsl:when test="substring($s3, 1, 1) = $APOS"><xsl:value-of select="translate(substring-before(substring-after($s2, $APOS), $APOS), '\', '/')"/></xsl:when></xsl:choose></xsl:otherwise></xsl:choose></xsl:if></xsl:template><xsl:template name="ut:is_absolute_url"><!--** An URL string. --><xsl:param name="url"/><xsl:choose><xsl:when test="string-length($url) = 0"><xsl:value-of select="$ut:true"/></xsl:when><xsl:when test="contains($url, ':')"><xsl:value-of select="$ut:true"/></xsl:when><xsl:when test="starts-with($url, '/')"><xsl:value-of select="$ut:true"/></xsl:when></xsl:choose></xsl:template><xsl:template name="ut:repeat"><!--** A repeated string. --><xsl:param name="string"/><!--** A number of times to repeat. --><xsl:param name="count"/><xsl:if test="$count &gt; 0"><xsl:value-of select="$string"/><xsl:call-template name="ut:repeat"><xsl:with-param name="string" select="$string"/><xsl:with-param name="count" select="$count - 1"/></xsl:call-template></xsl:if></xsl:template><xsl:template name="ut:replace"><!--** A string to be processed. --><xsl:param name="string"/><!--** A replaced substring. --><xsl:param name="target"/><!--** A substring to be substituted for each match. --><xsl:param name="replacement"/><xsl:variable name="_lenT" select="string-length($target)"/><xsl:choose><xsl:when test="$_lenT = 0"><xsl:value-of select="$string"/></xsl:when><xsl:when test="starts-with($string, $target)"><xsl:value-of select="$replacement"/><xsl:call-template name="ut:replace"><xsl:with-param name="string" select="substring($string, $_lenT + 1)"/><xsl:with-param name="target" select="$target"/><xsl:with-param name="replacement" select="$replacement"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:variable name="_before" select="substring-before($string, $target)"/><xsl:choose><xsl:when test="$_before = ''"><xsl:value-of select="$string"/></xsl:when><xsl:otherwise><xsl:variable name="_lenB" select="string-length($_before)"/><xsl:variable name="_posA" select="$_lenB + $_lenT + 1"/><xsl:value-of select="$_before"/><xsl:value-of select="$replacement"/><xsl:call-template name="ut:replace"><xsl:with-param name="string" select="substring($string, $_posA)"/><xsl:with-param name="target" select="$target"/><xsl:with-param name="replacement" select="$replacement"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ut:trim_start"><!--** A string to be processed. --><xsl:param name="string"/><!--** A substring to be trimmed. --><xsl:param name="target"/><xsl:variable name="_lenS" select="string-length($string)"/><xsl:variable name="_lenT" select="string-length($target)"/><xsl:choose><xsl:when test="$_lenS = 0"/><xsl:when test="$_lenT = 0"><xsl:variable name="_first" select="substring($string, 1, 1)"/><xsl:choose><xsl:when test="normalize-space($_first) = ''"><xsl:call-template name="ut:trim_start"><xsl:with-param name="string" select="substring($string, 2)"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="$string"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="starts-with($string, $target)"><xsl:call-template name="ut:trim_start"><xsl:with-param name="string" select="substring($string, $_lenT + 1)"/><xsl:with-param name="target" select="$target"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="$string"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ut:trim_end"><!--** A string to be processed. --><xsl:param name="string"/><!--** A substring to be trimmed. --><xsl:param name="target"/><xsl:variable name="_lenS" select="string-length($string)"/><xsl:variable name="_lenT" select="string-length($target)"/><xsl:choose><xsl:when test="$_lenS = 0"/><xsl:when test="$_lenT = 0"><xsl:variable name="_last" select="substring($string, $_lenS, 1)"/><xsl:choose><xsl:when test="normalize-space($_last) = ''"><xsl:call-template name="ut:trim_end"><xsl:with-param name="string" select="substring($string, 1, $_lenS - 1)"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="$string"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="substring($string, $_lenS - $_lenT + 1) = $target"><xsl:call-template name="ut:trim_end"><xsl:with-param name="string" select="substring($string, 1, $_lenS - $_lenT)"/><xsl:with-param name="target" select="$target"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="$string"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ut:trim"><!--** A string to be processed. --><xsl:param name="string"/><!--** A substring to be trimmed. --><xsl:param name="target"/><xsl:variable name="_str"><xsl:call-template name="ut:trim_start"><xsl:with-param name="string" select="$string"/><xsl:with-param name="target" select="$target"/></xsl:call-template></xsl:variable><xsl:call-template name="ut:trim_end"><xsl:with-param name="string" select="$_str"/><xsl:with-param name="target" select="$target"/></xsl:call-template></xsl:template><xsl:template name="ut:validate"><!--** A string to be tested. --><xsl:param name="string"/><!--** A character set to be forbidden. --><xsl:param name="forbidden"/><!--** A default string if a tested string contains one of forbidden characters. --><xsl:param name="default"/><xsl:variable name="_s" select="translate($string, $forbidden, '')"/><xsl:choose><xsl:when test="string-length($_s) = string-length($string)"><xsl:value-of select="$string"/></xsl:when><xsl:otherwise><xsl:value-of select="$default"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="assert-not-empty[@name='ut:count']"><xsl:variable name="result"><xsl:call-template name="ut:count"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:count</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:count']"><xsl:variable name="result"><xsl:call-template name="ut:count"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:count</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:count']"><xsl:variable name="result"><xsl:call-template name="ut:count"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:count</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:ends_with']"><xsl:variable name="result"><xsl:call-template name="ut:ends_with"><xsl:with-param name="string" select="string"/><xsl:with-param name="suffix" select="suffix"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:ends_with</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',suffix='<xsl:value-of select="suffix"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:ends_with']"><xsl:variable name="result"><xsl:call-template name="ut:ends_with"><xsl:with-param name="string" select="string"/><xsl:with-param name="suffix" select="suffix"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:ends_with</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',suffix='<xsl:value-of select="suffix"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:ends_with']"><xsl:variable name="result"><xsl:call-template name="ut:ends_with"><xsl:with-param name="string" select="string"/><xsl:with-param name="suffix" select="suffix"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:ends_with</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',suffix='<xsl:value-of select="suffix"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:get_dir_from_url']"><xsl:variable name="result"><xsl:call-template name="ut:get_dir_from_url"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_dir_from_url</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:get_dir_from_url']"><xsl:variable name="result"><xsl:call-template name="ut:get_dir_from_url"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_dir_from_url</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:get_dir_from_url']"><xsl:variable name="result"><xsl:call-template name="ut:get_dir_from_url"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_dir_from_url</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:_get_dir_from_url_r']"><xsl:variable name="result"><xsl:call-template name="ut:_get_dir_from_url_r"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:_get_dir_from_url_r</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:_get_dir_from_url_r']"><xsl:variable name="result"><xsl:call-template name="ut:_get_dir_from_url_r"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:_get_dir_from_url_r</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:_get_dir_from_url_r']"><xsl:variable name="result"><xsl:call-template name="ut:_get_dir_from_url_r"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:_get_dir_from_url_r</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:get_namespace_uri']"><xsl:variable name="result"><xsl:call-template name="ut:get_namespace_uri"><xsl:with-param name="prefix" select="prefix"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_namespace_uri</h3><xsl:variable name="param">,prefix='<xsl:value-of select="prefix"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:get_namespace_uri']"><xsl:variable name="result"><xsl:call-template name="ut:get_namespace_uri"><xsl:with-param name="prefix" select="prefix"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_namespace_uri</h3><xsl:variable name="param">,prefix='<xsl:value-of select="prefix"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:get_namespace_uri']"><xsl:variable name="result"><xsl:call-template name="ut:get_namespace_uri"><xsl:with-param name="prefix" select="prefix"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_namespace_uri</h3><xsl:variable name="param">,prefix='<xsl:value-of select="prefix"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:get_xsl_url']"><xsl:variable name="result"><xsl:call-template name="ut:get_xsl_url"><xsl:with-param name="pi" select="pi"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_xsl_url</h3><xsl:variable name="param">,pi='<xsl:value-of select="pi"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:get_xsl_url']"><xsl:variable name="result"><xsl:call-template name="ut:get_xsl_url"><xsl:with-param name="pi" select="pi"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_xsl_url</h3><xsl:variable name="param">,pi='<xsl:value-of select="pi"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:get_xsl_url']"><xsl:variable name="result"><xsl:call-template name="ut:get_xsl_url"><xsl:with-param name="pi" select="pi"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:get_xsl_url</h3><xsl:variable name="param">,pi='<xsl:value-of select="pi"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:is_absolute_url']"><xsl:variable name="result"><xsl:call-template name="ut:is_absolute_url"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:is_absolute_url</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:is_absolute_url']"><xsl:variable name="result"><xsl:call-template name="ut:is_absolute_url"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:is_absolute_url</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:is_absolute_url']"><xsl:variable name="result"><xsl:call-template name="ut:is_absolute_url"><xsl:with-param name="url" select="url"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:is_absolute_url</h3><xsl:variable name="param">,url='<xsl:value-of select="url"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:repeat']"><xsl:variable name="result"><xsl:call-template name="ut:repeat"><xsl:with-param name="string" select="string"/><xsl:with-param name="count" select="count"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:repeat</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',count='<xsl:value-of select="count"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:repeat']"><xsl:variable name="result"><xsl:call-template name="ut:repeat"><xsl:with-param name="string" select="string"/><xsl:with-param name="count" select="count"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:repeat</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',count='<xsl:value-of select="count"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:repeat']"><xsl:variable name="result"><xsl:call-template name="ut:repeat"><xsl:with-param name="string" select="string"/><xsl:with-param name="count" select="count"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:repeat</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',count='<xsl:value-of select="count"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:replace']"><xsl:variable name="result"><xsl:call-template name="ut:replace"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/><xsl:with-param name="replacement" select="replacement"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:replace</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>',replacement='<xsl:value-of select="replacement"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:replace']"><xsl:variable name="result"><xsl:call-template name="ut:replace"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/><xsl:with-param name="replacement" select="replacement"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:replace</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>',replacement='<xsl:value-of select="replacement"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:replace']"><xsl:variable name="result"><xsl:call-template name="ut:replace"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/><xsl:with-param name="replacement" select="replacement"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:replace</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>',replacement='<xsl:value-of select="replacement"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:trim_start']"><xsl:variable name="result"><xsl:call-template name="ut:trim_start"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim_start</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:trim_start']"><xsl:variable name="result"><xsl:call-template name="ut:trim_start"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim_start</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:trim_start']"><xsl:variable name="result"><xsl:call-template name="ut:trim_start"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim_start</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:trim_end']"><xsl:variable name="result"><xsl:call-template name="ut:trim_end"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim_end</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:trim_end']"><xsl:variable name="result"><xsl:call-template name="ut:trim_end"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim_end</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:trim_end']"><xsl:variable name="result"><xsl:call-template name="ut:trim_end"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim_end</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:trim']"><xsl:variable name="result"><xsl:call-template name="ut:trim"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:trim']"><xsl:variable name="result"><xsl:call-template name="ut:trim"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:trim']"><xsl:variable name="result"><xsl:call-template name="ut:trim"><xsl:with-param name="string" select="string"/><xsl:with-param name="target" select="target"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:trim</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',target='<xsl:value-of select="target"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-not-empty[@name='ut:validate']"><xsl:variable name="result"><xsl:call-template name="ut:validate"><xsl:with-param name="string" select="string"/><xsl:with-param name="forbidden" select="forbidden"/><xsl:with-param name="default" select="default"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:validate</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',forbidden='<xsl:value-of select="forbidden"/>',default='<xsl:value-of select="default"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) != 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-empty[@name='ut:validate']"><xsl:variable name="result"><xsl:call-template name="ut:validate"><xsl:with-param name="string" select="string"/><xsl:with-param name="forbidden" select="forbidden"/><xsl:with-param name="default" select="default"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:validate</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',forbidden='<xsl:value-of select="forbidden"/>',default='<xsl:value-of select="default"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="string-length($result) = 0"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="assert-equal[@name='ut:validate']"><xsl:variable name="result"><xsl:call-template name="ut:validate"><xsl:with-param name="string" select="string"/><xsl:with-param name="forbidden" select="forbidden"/><xsl:with-param name="default" select="default"/></xsl:call-template></xsl:variable><div><code><div><h3>ut:validate</h3><xsl:variable name="param">,string='<xsl:value-of select="string"/>',forbidden='<xsl:value-of select="forbidden"/>',default='<xsl:value-of select="default"/>'</xsl:variable><xsl:value-of select="concat('(', substring($param, 2), ')')"/> … <xsl:choose><xsl:when test="$result = expect"><span style="color:#0d0">PASS</span></xsl:when><xsl:otherwise><span style="color:#d00">FAIL</span><style>h2 { background-color: #f00 }</style></xsl:otherwise></xsl:choose></div><div style="padding-left: 1rem">- Expect[<xsl:value-of select="expect"/>]</div><div style="padding-left: 1rem">- Result[<xsl:value-of select="$result"/>]</div></code></div><hr/></xsl:template><xsl:template match="/unit-test"><html><head><meta charset="utf-8"/><title><xsl:value-of select="@title"/></title></head><body><h2><xsl:value-of select="@title"/></h2><hr/><xsl:apply-templates select="*"/></body></html></xsl:template></xsl:stylesheet>